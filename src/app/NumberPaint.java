/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.LinkedList;
import java.util.List;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import neuralnetwork.NeuralNetwork;
import neuralnetwork.ValuesList;
import parser.CsvParserException;
import parser.CsvReader;

/**
 *
 * @author Николай
 */
public final class NumberPaint extends javax.swing.JFrame {

    /**
     * Creates new form NumberPaint
     */
    boolean pressed = false;
    int xPad;
    int xf;
    int yf;
    int yPad;
    MyPanel panel;
    int size = 64;
    ValuesList inputValues;
    int w = 64, h = 64;
    NeuralNetwork neuralNetwork;

    public NumberPaint() {
        initComponents();
        inputValues = new ValuesList(size * size);
        neuralNetwork = new NeuralNetwork(size * size, 10, size / 2);
        panel = new MyPanel();

        panel.setBounds(30, 30, 260, 260);
        panel.setBackground(Color.white);
        panel.setOpaque(true);
        this.add(panel);
        panel.addMouseMotionListener(new MouseMotionAdapter() {

            @Override
            public void mouseDragged(MouseEvent e) {
                if (pressed == true) {
                    if (e.getX() >= 0 && e.getY() >= 0 && e.getY() < panel.getHeight() && e.getX() < panel.getWidth()) {
                        int t = size;
                        int shiftX = (int) ((double) (panel.getWidth() / t));
                        int shiftY = (int) ((double) (panel.getHeight() / t));
                        int dx = (int) ((double) e.getX() / shiftX);
                        int dy = (int) ((double) e.getY() / shiftY);

                        Point p = new Point(dx * shiftX, dy * shiftY);

                        Graphics g = panel.getImag().getGraphics();
                        Graphics2D g2 = (Graphics2D) g;
                        // установка цвета
                        g2.setColor(Color.BLACK);

                        g2.fillRect(p.x, p.y, shiftX * 2, shiftY * 2);

//                        g2.drawLine(xPad, yPad, e.getX(), e.getY());
//
//                        g2.setStroke(new BasicStroke(3.0f));
//                        g2.drawLine(xPad, yPad, e.getX(), e.getY());
                        xPad = e.getX();
                        yPad = e.getY();
                        try {

                            inputValues.set(dy * t + dx, 1d);
                            inputValues.set(dy * t + t + dx, 1d);
                            inputValues.set(dy * t + dx + 1, 1d);
                            inputValues.set(dy * t + t + dx + 1, 1d);

                        } catch (IndexOutOfBoundsException ex) {
                        }
                    }

                }
                panel.repaint();
            }
        });
        panel.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                Graphics g = panel.getImag().getGraphics();
                Graphics2D g2 = (Graphics2D) g;
                // установка цвета
                g2.setColor(Color.BLACK);

                g2.drawLine(xPad, yPad, xPad + 1, yPad + 1);

                //   g2.setStroke(new BasicStroke(3.0f));
                //   g2.drawLine(xPad, yPad, xPad + 1, yPad + 1);
                xPad = e.getX();
                yPad = e.getY();

                pressed = true;
                panel.repaint();
            }

            @Override
            public void mousePressed(MouseEvent e) {
                xPad = e.getX();
                yPad = e.getY();
                xf = e.getX();
                yf = e.getY();
                pressed = true;
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                pressed = false;
                panel.repaint();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        myPanel1 = new app.MyPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButtonInputVectro = new javax.swing.JButton();
        jButtonReconige = new javax.swing.JButton();
        jLabelReconige = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButtonTrain = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jProgressBar1 = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(100, 100, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButtonInputVectro.setText("Вх вектор");
        jButtonInputVectro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInputVectroActionPerformed(evt);
            }
        });

        jButtonReconige.setText("Распознать");
        jButtonReconige.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReconigeActionPerformed(evt);
            }
        });

        jLabelReconige.setText(" ");

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButtonTrain.setText("Обучить");
        jButtonTrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTrainActionPerformed(evt);
            }
        });

        jProgressBar1.setMaximum(2);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonInputVectro)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonReconige)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabelReconige)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonTrain)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonInputVectro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonReconige)
                    .addComponent(jLabelReconige))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButtonTrain)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonInputVectroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInputVectroActionPerformed
        String vector = "";
        int i = 0;
        for (double j : inputValues) {
            if (j == 0) {
                vector += "-  ";

            } else {
                vector += "*  ";
                //vector += j + " ";
            }

            i++;

            if (i > 63) {
                vector += "/  ";
                i = 0;
                vector += "\n";
                vector += "/  ";
            }

        }
        JOptionPane.showMessageDialog(this, vector);
    }//GEN-LAST:event_jButtonInputVectroActionPerformed

    private void jButtonReconigeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReconigeActionPerformed

        jTextArea1.setText("");
        ValuesList outputValues = neuralNetwork.calculateOutputs(inputValues);
        for (int i = 0; i < outputValues.size(); i++) {
            jTextArea1.setText(jTextArea1.getText() + " " + i + ":  --> " + outputValues.get(i) + "\n");
        }

    }//GEN-LAST:event_jButtonReconigeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Graphics g = panel.getImag().getGraphics();
        g.setColor(Color.WHITE);
        g.fillRect(0, 0, panel.getWidth(), panel.getHeight());
        panel.repaint();
        inputValues = new ValuesList(size * size);
        jTextArea1.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonTrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTrainActionPerformed
        try {
            String s = jTextField1.getText();
            int i = Integer.parseInt(s);
            if (i <= 0) {
                return;
            }
            Train train = new Train(i);
            Thread thread = new Thread(train);
            thread.start();
        } catch (NumberFormatException ex) {
        }
    }//GEN-LAST:event_jButtonTrainActionPerformed
    private List<String> parseNextLine(Scanner scanner) {
        try {
            List<String> result = new LinkedList<String>();
            if (scanner.isEof()) {
                return null;
            }
            while (parseValue(scanner, result)) {
                // empty
            }
            return result;
        } catch (IOException e) {
            throw new CsvParserException("Failed to parse CSV file", e);
        }
    }

    private boolean parseValue(Scanner scanner, List<String> result) throws IOException {
        StringBuilder builder = new StringBuilder();
        int ch;
        while ((ch = scanner.read()) != -1) {
            if (ch == FIELD_SEP_COMMA) {
                result.add(builder.toString());
                return true;
            } else if (ch == QUOTE_DOUBLE) {
                parseQuotedValue(scanner, builder);
            } else if (ch == 13) {
                ch = scanner.read();
                if (ch != 10) {
                    scanner.unread(ch);
                }
                break;
            } else if (ch == 10) {
                break;
            } else {
                builder.append((char) ch);
            }
        }
        // end of line (or file) reached
        result.add(builder.toString());
        return false;
    }

    private void parseQuotedValue(Scanner scanner, StringBuilder builder) throws IOException {
        int ch;
        while ((ch = scanner.read()) != -1) {
            if (ch == QUOTE_DOUBLE) {
                ch = scanner.read();
                if (ch != QUOTE_DOUBLE) {
                    scanner.unread(ch);
                    break;
                }
            }
            builder.append((char) ch);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NumberPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NumberPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NumberPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NumberPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NumberPaint().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonInputVectro;
    private javax.swing.JButton jButtonReconige;
    private javax.swing.JButton jButtonTrain;
    private javax.swing.JLabel jLabelReconige;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private app.MyPanel myPanel1;
    // End of variables declaration//GEN-END:variables
 public static final char FIELD_SEP_COMMA = ',';

    public static final char QUOTE_DOUBLE = '"';

    private static class Scanner {

        private final Reader reader;
        private int ch = -1;

        public Scanner(Reader reader) {
            this.reader = reader;
        }

        public int read() throws IOException {
            if (ch == -1) {
                return reader.read();
            }

            int result = ch;
            ch = -1;
            return result;
        }

        public void unread(int c) {
            if (ch != -1) {
                throw new IllegalStateException();
            }
            ch = c;
        }

        public boolean isEof() throws IOException {
            ch = this.read();
            return ch == -1;
        }
    }

    private class Train implements Runnable {

        private int iterator;

        private Train(int i) {
            iterator = i;

        }

        @Override
        public void run() {
            try {
                jProgressBar1.setMaximum(2 * iterator);
                jProgressBar1.setValue(1);
                jButtonTrain.setEnabled(false);
                for (int l = 0; 0 < iterator; l++) {

                    File file = new File("train.csv");
                    BufferedReader r = null;
                    r = new BufferedReader(new FileReader(file));
                    Scanner scanner = new Scanner(r);

                    List<String> startList = parseNextLine(scanner);

                    int count = Integer.parseInt(startList.get(0));
                    parseNextLine(scanner);
                    int i = 0;

                    for (int k = 0; k < count; k++) {

                        jProgressBar1.setValue(l * k + k);
                        List<String> list = parseNextLine(scanner);
                        if (list == null || list.get(0).isEmpty()) {
                            break;
                        }
                        ValuesList valuesListInput = new ValuesList();
                        String s = list.get(0);
                        for (int j = 0; j < s.length(); j++) {
                            valuesListInput.add(Double.parseDouble(String.valueOf(s.charAt(j))));
                        }

                        parseNextLine(scanner);

                        list = parseNextLine(scanner);
                        ValuesList valuesListTarget = new ValuesList();
                        for (String string : list) {
                            valuesListTarget.add(Double.parseDouble(string));
                        }
                        neuralNetwork.backPropagation(valuesListInput, valuesListTarget, 0.9);
                        parseNextLine(scanner);

                    }
                    scanner.reader.close();

                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(NumberPaint.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(NumberPaint.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                jButtonTrain.setEnabled(true);
                JOptionPane.showMessageDialog(panel, "Обучение закончено");
            }
        }
    }
}
